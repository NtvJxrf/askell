import Client from "./src/utils/got.js";
import dotenv from 'dotenv';
dotenv.config();

import * as XLSX from 'xlsx';
import fs from 'fs';

const urlBase = 'https://api.moysklad.ru/api/remap/1.2/entity/demand?filter=moment%3E2024-01-01%2001:00:00;moment%3C2024-12-31%2023:59:59;owner=https://api.moysklad.ru/api/remap/1.2/entity/employee/7d367f48-05e9-11e6-7a69-8f550000df87;owner=https://api.moysklad.ru/api/remap/1.2/entity/employee/03579653-eedf-11e8-9107-50480000f34d&expand=positions.assortment';

const rows = await fetchAllRows(urlBase);
const sortedAssortments = extractAndSortAssortments(rows);
exportToExcel(sortedAssortments);

function extractAndSortAssortments(rows) {
  const getAttribute = (attributes, name) => {
    return attributes?.find(attr => attr.name === name)?.value;
  };

  const assortments = [];

  for (const row of rows) {
    for (const pos of row.positions.rows) {
      const month = extractMonthKey(row.moment);
      const assortment = pos.assortment;
      const attributes = assortment.attributes;

      const size = getAttribute(attributes, '–†–∞–∑–º–µ—Ä') || '0*0';
      const series = getAttribute(attributes, '–°–µ—Ä–∏—è') || 'undefined';
      const lengthMm = parseFloat(getAttribute(attributes, '–î–ª–∏–Ω–∞ –≤ –º–º')) || 0;
      const widthMm = parseFloat(getAttribute(attributes, '–®–∏—Ä–∏–Ω–∞ –≤ –º–º')) || 0;

      const areaPerPiece = (lengthMm * widthMm) / 1_000_000; // –º2
      const quantity = pos.quantity || 1;

      const basePrice = pos.price / 100;
      const discount = pos.discount ?? 0;
      const price = basePrice * (1 - discount / 100);

      assortments.push({
        name: assortment.name,
        size,
        series,
        quantity,
        price,
        areaPerPiece,
        month,
      });
    }
  }

  return assortments;
}

function exportToExcel(assortments, filename = 'report.xlsx') {
  const grouped = {};

  for (const item of assortments) {
    const { month, size, series } = item;
    if (!grouped[month]) grouped[month] = {};
    if (!grouped[month][size]) grouped[month][size] = {};
    if (!grouped[month][size][series]) grouped[month][size][series] = [];
    grouped[month][size][series].push(item);
  }

  const workbook = XLSX.utils.book_new();

  for (const month of Object.keys(grouped)) {
    const data = [];

    let monthTotalQty = 0;
    let monthTotalArea = 0;
    let monthTotalSum = 0;

    for (const size of Object.keys(grouped[month])) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä–∞–∑–º–µ—Ä–æ–º ‚Äî —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ
      data.push({ –†–∞–∑–º–µ—Ä: size, –°–µ—Ä–∏—è: "", –ù–∞–∑–≤–∞–Ω–∏–µ: "", –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "", –¶–µ–Ω–∞_–∑–∞_—à—Ç: "", –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2: "", –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2: "", –°—É–º–º–∞: "" });

      let sizeTotalQty = 0;
      let sizeTotalArea = 0;
      let sizeTotalSum = 0;

      for (const series of Object.keys(grouped[month][size])) {
        let seriesTotalQty = 0;
        let seriesTotalArea = 0;
        let seriesTotalSum = 0;

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, —á—Ç–æ–±—ã —Å–µ—Ä–∏—è –≤—ã–≤–æ–¥–∏–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –≤ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –±–ª–æ–∫–∞
        let firstInSeries = true;

        for (const item of grouped[month][size][series]) {
          const qty = item.quantity;
          const area = item.areaPerPiece * qty;
          const sum = item.price * qty;

          data.push({
            –†–∞–∑–º–µ—Ä: "",
            –°–µ—Ä–∏—è: firstInSeries ? series : "",
            –ù–∞–∑–≤–∞–Ω–∏–µ: item.name,
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: qty,
            –¶–µ–Ω–∞_–∑–∞_—à—Ç: item.price.toFixed(2),
            –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2: item.areaPerPiece.toFixed(3),
            –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2: area.toFixed(3),
            –°—É–º–º–∞: sum.toFixed(2),
          });

          firstInSeries = false;

          seriesTotalQty += qty;
          seriesTotalArea += area;
          seriesTotalSum += sum;
        }

        // –ò—Ç–æ–≥ –ø–æ —Å–µ—Ä–∏–∏ (–ø–∏—à–µ–º —Å–µ—Ä–∏—é –ø—É—Å—Ç–æ)
        data.push({
          –†–∞–∑–º–µ—Ä: "",
          –°–µ—Ä–∏—è: "",
          –ù–∞–∑–≤–∞–Ω–∏–µ: `–ò–¢–û–ì–û –ø–æ —Å–µ—Ä–∏–∏`,
          –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: seriesTotalQty,
          –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2: "",
          –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2: seriesTotalArea.toFixed(3),
          –°—É–º–º–∞: seriesTotalSum.toFixed(2),
        });

        sizeTotalQty += seriesTotalQty;
        sizeTotalArea += seriesTotalArea;
        sizeTotalSum += seriesTotalSum;
      }

      // –ò—Ç–æ–≥ –ø–æ —Ä–∞–∑–º–µ—Ä—É
      data.push({
        –†–∞–∑–º–µ—Ä: "",
        –°–µ—Ä–∏—è: "",
        –ù–∞–∑–≤–∞–Ω–∏–µ: `üî∑ –ò–¢–û–ì–û –ø–æ —Ä–∞–∑–º–µ—Ä—É`,
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: sizeTotalQty,
        –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2: "",
        –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2: sizeTotalArea.toFixed(3),
        –°—É–º–º–∞: sizeTotalSum.toFixed(2),
      });

      monthTotalQty += sizeTotalQty;
      monthTotalArea += sizeTotalArea;
      monthTotalSum += sizeTotalSum;
    }

    // –ò—Ç–æ–≥ –ø–æ –º–µ—Å—è—Ü—É
    data.push({
      –†–∞–∑–º–µ—Ä: "",
      –°–µ—Ä–∏—è: "",
      –ù–∞–∑–≤–∞–Ω–∏–µ: `üî∑üî∑ –ò–¢–û–ì–û –ø–æ –º–µ—Å—è—Ü—É ${month}`,
      –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: monthTotalQty,
      –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2: "",
      –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2: monthTotalArea.toFixed(3),
      –°—É–º–º–∞: monthTotalSum.toFixed(2),
    });

    const worksheet = XLSX.utils.json_to_sheet(data, { skipHeader: false });
    worksheet['!cols'] = [
      { wch: 10 }, // –†–∞–∑–º–µ—Ä
      { wch: 10 }, // –°–µ—Ä–∏—è
      { wch: 90 }, // –ù–∞–∑–≤–∞–Ω–∏–µ
      { wch: 10 }, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      { wch: 12 }, // –¶–µ–Ω–∞_–∑–∞_—à—Ç
      { wch: 15 }, // –ü–ª–æ—â–∞–¥—å_–Ω–∞_—à—Ç_–º2
      { wch: 15 }, // –û–±—â–∞—è_–ø–ª–æ—â–∞–¥—å_–º2
      { wch: 15 }, // –°—É–º–º–∞
    ];
    XLSX.utils.book_append_sheet(workbook, worksheet, month);
  }

  XLSX.writeFile(workbook, filename);
}




function extractMonthKey(isoDateString) {
  const date = new Date(isoDateString);
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  return `${year}-${month}`;
}

async function fetchAllRows(urlBase) {
  const allRows = [];
  let offset = 0;
  const limit = 100;

  while (true) {
    const url = `${urlBase}&limit=${limit}&offset=${offset}`;
    const response = await Client.sklad(url);

    if (!response.rows || response.rows.length === 0) break;

    allRows.push(...response.rows);

    if (response.rows.length < limit) break;

    offset += limit;
  }

  return allRows;
}
